<?php namespace ProcessWire;

/**
 * ProcessWire 'Hello world' demonstration module
 *
 * Demonstrates the Module interface and how to add hooks.
 * 
 * See README file for further links regarding module development.
 * 
 * This file is licensed under the MIT license
 * https://processwire.com/about/license/mit/
 * 
 * ProcessWire 3.x, Copyright 2016 by Ryan Cramer
 * https://processwire.com
 *
 */

require_once 'StravaApi.php';






class GetStravaSegments extends WireData implements Module {

	/**
	 * getStravaSegments gets segmentsdata from strava based on id
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(

			// The module's title, typically a little more descriptive than the class name
			'title' => 'Get Strava segments data', 

			// version number 
			'version' => 1, 

			// summary is brief description of what this module is
			'summary' => 'gets segmentsdata from strava based on id.',
			
			// This is usually what you want for modules that attach hooks. 
			'singular' => true, 
			'autoload' => true, 
		
			// Optional font-awesome icon name, minus the 'fa-' part
			'icon' => 'smile-o', 
			);
	}


	public function init() {
        $this->addHookMethod("Page::strava", $this, 'keepLoggedInStrava');
        $this->addHookMethod("Page::activities", $this, 'getUserActivities');
        $this->addHookMethod("Page::addEffort", $this, 'addEffort');
        $this->pages->addHookBefore('save', $this, 'getRouteData'); 
        $this->pages->addHookBefore('save', $this, 'getSegmentsData'); 
        
        if($_GET['action'] == 'addEffort') {
            addEffort($this->page);
        }
	}

	/**
	 * update route data from strava
	 * 
	 * @param HookEvent $event
	 *
	 */
	public function getRouteData($event) {
		/** @var Page $page */
		$page = $event->arguments[0];
        if($page->template == 'event') {
            $strava = $this->connectToStrava()->get('routes/' . $page->routeID);
            $page->title =  $strava->name;
            $page->about = $strava->description;
            $page->distance = $strava->distance;
            $page->elevation = $strava->elevation_gain;
            $this->message("Fetched route data: {$strava->name}.");
        } 
        
	}

    /**
	 * update segment data from strava
	 * 
	 * @param HookEvent $event
	 *
	 */
	public function getSegmentsData($event) {
		/** @var Page $page */
		$page = $event->arguments[0];
        if($page->template == 'event') {
            foreach($page->segments as $item) {
                $strava = $this->connectToStrava()->get('segments/' . $item->{segmentID});
                $item->set('title', $strava->name);
                $item->{distance} = $strava->distance;
                $item->{elevation} = $strava->total_elevation_gain;
                $item->save();
                $this->message("Fetched segments data: {$strava->name}.");
            }
        } 
	}
    
	/**
	 * get access to strava
	 */
    private function connectToStrava($noaccess = false) {
        $clientId       = 3493;
        $clientSecret   = 'f2cef53be42d5e9e1190ff8252f2614620d3997d';
        $accessToken    = 'c3d6701aca3688906be1e701eb73f82a41b75e6a';
        $redirect       = 'localhost:8888/runduro';
        $api            = new StravaApi(
           $clientId,
           $clientSecret
        );
        if(!$noaccess) {
            $api->setAccessToken($accessToken);
        }
        
        return $api;
    }
    
    public function keepLoggedInStrava($event) {
        $page = $event->object;
        $type = $event->arguments(0);
        $api = $this->connectToStrava();
        if( !isset($_GET["code"]) && !isset($_COOKIE["code"]) ) {
            $loginURL = $api->authenticationUrl($page->httpUrl);
        } else if(isset($_COOKIE["code"])) {
            $strava_result = $api->tokenExchange($_COOKIE["code"]);
        } else {
            $code=$_GET["code"];
            setcookie("code", $code, time() + (86400 * 30), "/");

            $strava_result = $api->tokenExchange($code);

        }

        if($type == 'url') {
            $event->return = $loginURL;
        } else if($type == 'user') {
            $event->return = $strava_result;
        }

    }
    
    public function authUser() {
        $api = $this->connectToStrava(true);
        $code = isset($_COOKIE["code"]) ? $_COOKIE["code"] : $_GET["code"];
        $user = $api->tokenExchange($code);
        $api->setAccessToken($user->access_token);
        
        return $api;
    }
    
    public function getUserActivities($event) {
        $page = $event->object;
        $api = $this->connectToStrava(true);
        $code = isset($_COOKIE["code"]) ? $_COOKIE["code"] : $_GET["code"];
        $user = $api->tokenExchange($code);
        $api->setAccessToken($user->access_token);
        $activities_result = $this->matchActivityToRace($api, $page, $api->get('athlete/activities?before='.strtotime($page->enddate).'&after='.strtotime($page->startdate)));
        
       
        $event->return = $activities_result;
    }
    
    public function matchActivityToRace($api, $page, $activities) {
        $filtered_activities = array();
        $total_segments = count($page->segments);
        foreach($activities as $activity) {
            $count_matches = 0;
            $efforts = $api->get('activities/' . $activity->id)->segment_efforts;
            foreach($efforts as $effort) {
                foreach($page->segments as $item) {
                    $raceSegmentID = $item->{segmentID};
                    if($raceSegmentID == $effort->segment->id) {
                        $count_matches++;
                    }
                }
            }
            if($count_matches == $total_segments) {
                array_push($filtered_activities, $activity);
            }
        }
        
        return $filtered_activities;
    }
    
    public function addEffort($page) {
        $api = $this->connectToStrava(true);
        $code = isset($_COOKIE["code"]) ? $_COOKIE["code"] : $_GET["code"];
        $user = $api->tokenExchange($code);
        $api->setAccessToken($user->access_token);
        $name = $user->athlete->firstname . ' ' . $user->athlete->lastname;
        
        $activity = $api->get('activities/' . $_GET['activity']);
        

        $this->pages->add('effort', $page, [
            'title' => $name . ' ' . $activity->id,
            'activityID' => $activity->id,
            'athleteID' => $user->athlete->id,
            'time' => $activity->elapsed_time,
            'athlete_name' => $name
            
        ]);
    }

}

